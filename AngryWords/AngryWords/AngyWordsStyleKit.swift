//
//  AngyWordsStyleKit.swift
//  AngryWords
//
//  Created by RPKH on 24.10.14.
//  Copyright (c) 2014 Babbel. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class AngyWordsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var babbelOrange: UIColor = UIColor(red: 1.000, green: 0.553, blue: 0.082, alpha: 1.000)
        static var babbelOrange75: UIColor = UIColor(red: 1.000, green: 0.659, blue: 0.322, alpha: 1.000)
        static var babbelOrange50: UIColor = UIColor(red: 1.000, green: 0.776, blue: 0.549, alpha: 1.000)
        static var babbelOrange25: UIColor = UIColor(red: 1.000, green: 0.886, blue: 0.773, alpha: 1.000)
        static var babbelLightOrange: UIColor = UIColor(red: 0.980, green: 0.667, blue: 0.106, alpha: 1.000)
        static var babbelLightOrange75: UIColor = UIColor(red: 1.000, green: 0.749, blue: 0.318, alpha: 1.000)
        static var babbelLightOrange50: UIColor = UIColor(red: 1.000, green: 0.831, blue: 0.545, alpha: 1.000)
        static var babbelLightOrange25: UIColor = UIColor(red: 1.000, green: 0.918, blue: 0.773, alpha: 1.000)
        static var babbelYellow: UIColor = UIColor(red: 1.000, green: 0.784, blue: 0.204, alpha: 1.000)
        static var babbelYellow75: UIColor = UIColor(red: 1.000, green: 0.835, blue: 0.435, alpha: 1.000)
        static var babbelYellow50: UIColor = UIColor(red: 1.000, green: 0.941, blue: 0.773, alpha: 1.000)
        static var babbelYellow25: UIColor = UIColor(red: 1.000, green: 0.973, blue: 0.890, alpha: 1.000)
        static var babbelRed: UIColor = UIColor(red: 0.890, green: 0.333, blue: 0.224, alpha: 1.000)
        static var babbelRed75: UIColor = UIColor(red: 0.949, green: 0.478, blue: 0.388, alpha: 1.000)
        static var babbelRed50: UIColor = UIColor(red: 0.965, green: 0.655, blue: 0.592, alpha: 1.000)
        static var babbelRed25: UIColor = UIColor(red: 0.980, green: 0.824, blue: 0.796, alpha: 1.000)
        static var babbelGreen: UIColor = UIColor(red: 0.176, green: 0.761, blue: 0.463, alpha: 1.000)
        static var babbelGreen75: UIColor = UIColor(red: 0.424, green: 0.812, blue: 0.588, alpha: 1.000)
        static var babbelGreen50: UIColor = UIColor(red: 0.616, green: 0.875, blue: 0.725, alpha: 1.000)
        static var babbelgreen25: UIColor = UIColor(red: 0.808, green: 0.933, blue: 0.859, alpha: 1.000)
        static var babbelBlue: UIColor = UIColor(red: 0.251, green: 0.729, blue: 0.855, alpha: 1.000)
        static var babbelBlue75: UIColor = UIColor(red: 0.408, green: 0.812, blue: 0.918, alpha: 1.000)
        static var babbelBlue50: UIColor = UIColor(red: 0.604, green: 0.875, blue: 0.941, alpha: 1.000)
        static var babbelBlue25: UIColor = UIColor(red: 0.800, green: 0.937, blue: 0.973, alpha: 1.000)
        static var babbelBeige: UIColor = UIColor(red: 0.929, green: 0.922, blue: 0.882, alpha: 1.000)
        static var babbelBeige75: UIColor = UIColor(red: 0.949, green: 0.945, blue: 0.910, alpha: 1.000)
        static var babbelBeige50: UIColor = UIColor(red: 0.965, green: 0.965, blue: 0.937, alpha: 1.000)
        static var babbelBeige25: UIColor = UIColor(red: 0.984, green: 0.980, blue: 0.973, alpha: 1.000)
        static var babbelGray: UIColor = UIColor(red: 0.447, green: 0.447, blue: 0.404, alpha: 1.000)
        static var babbelGray75: UIColor = UIColor(red: 0.588, green: 0.584, blue: 0.549, alpha: 1.000)
        static var babbelGray50: UIColor = UIColor(red: 0.725, green: 0.725, blue: 0.698, alpha: 1.000)
        static var babbelGray25: UIColor = UIColor(red: 0.863, green: 0.863, blue: 0.851, alpha: 1.000)
        static var babbelFontDarkGray: UIColor = UIColor(red: 0.204, green: 0.204, blue: 0.204, alpha: 1.000)
        static var babbelFontGray: UIColor = UIColor(red: 0.447, green: 0.447, blue: 0.404, alpha: 1.000)
        static var imageOfCanvasCloud: UIImage?
        static var canvasCloudTargets: [AnyObject]?
    }

    //// Colors

    public class var babbelOrange: UIColor { return Cache.babbelOrange }
    public class var babbelOrange75: UIColor { return Cache.babbelOrange75 }
    public class var babbelOrange50: UIColor { return Cache.babbelOrange50 }
    public class var babbelOrange25: UIColor { return Cache.babbelOrange25 }
    public class var babbelLightOrange: UIColor { return Cache.babbelLightOrange }
    public class var babbelLightOrange75: UIColor { return Cache.babbelLightOrange75 }
    public class var babbelLightOrange50: UIColor { return Cache.babbelLightOrange50 }
    public class var babbelLightOrange25: UIColor { return Cache.babbelLightOrange25 }
    public class var babbelYellow: UIColor { return Cache.babbelYellow }
    public class var babbelYellow75: UIColor { return Cache.babbelYellow75 }
    public class var babbelYellow50: UIColor { return Cache.babbelYellow50 }
    public class var babbelYellow25: UIColor { return Cache.babbelYellow25 }
    public class var babbelRed: UIColor { return Cache.babbelRed }
    public class var babbelRed75: UIColor { return Cache.babbelRed75 }
    public class var babbelRed50: UIColor { return Cache.babbelRed50 }
    public class var babbelRed25: UIColor { return Cache.babbelRed25 }
    public class var babbelGreen: UIColor { return Cache.babbelGreen }
    public class var babbelGreen75: UIColor { return Cache.babbelGreen75 }
    public class var babbelGreen50: UIColor { return Cache.babbelGreen50 }
    public class var babbelgreen25: UIColor { return Cache.babbelgreen25 }
    public class var babbelBlue: UIColor { return Cache.babbelBlue }
    public class var babbelBlue75: UIColor { return Cache.babbelBlue75 }
    public class var babbelBlue50: UIColor { return Cache.babbelBlue50 }
    public class var babbelBlue25: UIColor { return Cache.babbelBlue25 }
    public class var babbelBeige: UIColor { return Cache.babbelBeige }
    public class var babbelBeige75: UIColor { return Cache.babbelBeige75 }
    public class var babbelBeige50: UIColor { return Cache.babbelBeige50 }
    public class var babbelBeige25: UIColor { return Cache.babbelBeige25 }
    public class var babbelGray: UIColor { return Cache.babbelGray }
    public class var babbelGray75: UIColor { return Cache.babbelGray75 }
    public class var babbelGray50: UIColor { return Cache.babbelGray50 }
    public class var babbelGray25: UIColor { return Cache.babbelGray25 }
    public class var babbelFontDarkGray: UIColor { return Cache.babbelFontDarkGray }
    public class var babbelFontGray: UIColor { return Cache.babbelFontGray }

    //// Drawing Methods

    public class func drawCanvasCloud() {
        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(16, 46, 163, 74), cornerRadius: 10)
        color.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(0, 40, 57, 80))
        color.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(42, 0, 98, 99))
        color.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(121, 25, 79, 95))
        color.setFill()
        oval3Path.fill()
    }

    public class func drawCanvasCactus() {
        //// Color Declarations
        let color2 = AngyWordsStyleKit.babbelGreen.colorWithSaturation(1)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(58, 52, 85, 310))
        color2.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(58, 0, 85, 102))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(189, 102))
        bezierPath.addCurveToPoint(CGPointMake(189, 102.18), controlPoint1: CGPointMake(189, 102), controlPoint2: CGPointMake(189, 102.06))
        bezierPath.addCurveToPoint(CGPointMake(209.68, 109.47), controlPoint1: CGPointMake(196.36, 101.28), controlPoint2: CGPointMake(204.03, 103.71))
        bezierPath.addCurveToPoint(CGPointMake(209.68, 145.53), controlPoint1: CGPointMake(219.44, 119.43), controlPoint2: CGPointMake(219.44, 135.57))
        bezierPath.addCurveToPoint(CGPointMake(189, 152.82), controlPoint1: CGPointMake(204.03, 151.29), controlPoint2: CGPointMake(196.36, 153.72))
        bezierPath.addCurveToPoint(CGPointMake(189, 153), controlPoint1: CGPointMake(189, 152.94), controlPoint2: CGPointMake(189, 153))
        bezierPath.addLineToPoint(CGPointMake(119, 153))
        bezierPath.addLineToPoint(CGPointMake(119, 102))
        bezierPath.addLineToPoint(CGPointMake(189, 102))
        bezierPath.addLineToPoint(CGPointMake(189, 102))
        bezierPath.closePath()
        color2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(98, 174))
        bezier2Path.addCurveToPoint(CGPointMake(98, 225), controlPoint1: CGPointMake(98, 174), controlPoint2: CGPointMake(98, 225))
        bezier2Path.addLineToPoint(CGPointMake(28, 225))
        bezier2Path.addCurveToPoint(CGPointMake(28, 224.82), controlPoint1: CGPointMake(28, 225), controlPoint2: CGPointMake(28, 224.94))
        bezier2Path.addCurveToPoint(CGPointMake(7.32, 217.53), controlPoint1: CGPointMake(20.64, 225.72), controlPoint2: CGPointMake(12.97, 223.29))
        bezier2Path.addCurveToPoint(CGPointMake(7.32, 181.47), controlPoint1: CGPointMake(-2.44, 207.57), controlPoint2: CGPointMake(-2.44, 191.43))
        bezier2Path.addCurveToPoint(CGPointMake(28, 174.18), controlPoint1: CGPointMake(12.97, 175.71), controlPoint2: CGPointMake(20.64, 173.28))
        bezier2Path.addCurveToPoint(CGPointMake(28, 174), controlPoint1: CGPointMake(28, 174.06), controlPoint2: CGPointMake(28, 174))
        bezier2Path.addLineToPoint(CGPointMake(98, 174))
        bezier2Path.addLineToPoint(CGPointMake(98, 174))
        bezier2Path.closePath()
        color2.setFill()
        bezier2Path.fill()
    }

    public class func drawCanvasStamm() {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// Stamm Drawing
        var stammPath = UIBezierPath()
        stammPath.moveToPoint(CGPointMake(9, 50))
        stammPath.addCurveToPoint(CGPointMake(9, 56), controlPoint1: CGPointMake(7, 55), controlPoint2: CGPointMake(9, 51.25))
        stammPath.addCurveToPoint(CGPointMake(9, 69), controlPoint1: CGPointMake(9, 60.75), controlPoint2: CGPointMake(6, 69))
        stammPath.addCurveToPoint(CGPointMake(18, 69), controlPoint1: CGPointMake(12, 69), controlPoint2: CGPointMake(18, 69))
        stammPath.addCurveToPoint(CGPointMake(18, 50), controlPoint1: CGPointMake(18, 69), controlPoint2: CGPointMake(17, 53))
        stammPath.addCurveToPoint(CGPointMake(18, 44), controlPoint1: CGPointMake(19, 47), controlPoint2: CGPointMake(18.25, 47.75))
        stammPath.addCurveToPoint(CGPointMake(18, 34), controlPoint1: CGPointMake(17.75, 40.25), controlPoint2: CGPointMake(18, 34))
        stammPath.addLineToPoint(CGPointMake(9, 34))
        stammPath.addCurveToPoint(CGPointMake(9, 50), controlPoint1: CGPointMake(9, 34), controlPoint2: CGPointMake(11, 45))
        stammPath.closePath()
        brown.setFill()
        stammPath.fill()
    }

    public class func drawCanvasSchleuderVorne() {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// SchleuderVorne 2 Drawing
        var schleuderVorne2Path = UIBezierPath()
        schleuderVorne2Path.moveToPoint(CGPointMake(25, 0))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(30, 4), controlPoint1: CGPointMake(29.5, -0), controlPoint2: CGPointMake(30, 4))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(24, 28), controlPoint1: CGPointMake(30, 4), controlPoint2: CGPointMake(29, 18))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(10, 41), controlPoint1: CGPointMake(19, 38), controlPoint2: CGPointMake(10, 41))
        schleuderVorne2Path.addLineToPoint(CGPointMake(10, 28))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(16, 22), controlPoint1: CGPointMake(10, 28), controlPoint2: CGPointMake(13.92, 28.64))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(20, 4), controlPoint1: CGPointMake(21, 6), controlPoint2: CGPointMake(20, 4))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(25, 0), controlPoint1: CGPointMake(20, 4), controlPoint2: CGPointMake(20.5, 0))
        schleuderVorne2Path.closePath()
        brown.setFill()
        schleuderVorne2Path.fill()
    }

    public class func drawCanvasSchleuderHinten() {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// SchleuderHinten 2 Drawing
        var schleuderHinten2Path = UIBezierPath()
        schleuderHinten2Path.moveToPoint(CGPointMake(4, 0))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(0, 3), controlPoint1: CGPointMake(0.02, -0), controlPoint2: CGPointMake(0, 3))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(4.31, 27), controlPoint1: CGPointMake(0, 3), controlPoint2: CGPointMake(-0.11, 17))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(14, 38), controlPoint1: CGPointMake(8.74, 37), controlPoint2: CGPointMake(14, 38))
        schleuderHinten2Path.addLineToPoint(CGPointMake(14, 27))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(10, 22), controlPoint1: CGPointMake(14, 27), controlPoint2: CGPointMake(11, 26))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(7, 3), controlPoint1: CGPointMake(6, 6), controlPoint2: CGPointMake(7, 3))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(4, 0), controlPoint1: CGPointMake(7, 3), controlPoint2: CGPointMake(7.98, 0))
        schleuderHinten2Path.closePath()
        brown.setFill()
        schleuderHinten2Path.fill()
    }

    public class func drawCanvasEule() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(110, 128, 312, 113))
        UIColor.grayColor().setFill()
        rectanglePath.fill()


        //// Polygon Drawing
        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(153, 40.5))
        polygonPath.addLineToPoint(CGPointMake(196.08, 128.25))
        polygonPath.addLineToPoint(CGPointMake(109.92, 128.25))
        polygonPath.closePath()
        UIColor.grayColor().setFill()
        polygonPath.fill()


        //// Polygon 2 Drawing
        var polygon2Path = UIBezierPath()
        polygon2Path.moveToPoint(CGPointMake(379, 40.5))
        polygon2Path.addLineToPoint(CGPointMake(422.08, 128.25))
        polygon2Path.addLineToPoint(CGPointMake(335.92, 128.25))
        polygon2Path.closePath()
        UIColor.grayColor().setFill()
        polygon2Path.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(153, 161, 63, 63))
        UIColor.grayColor().setFill()
        ovalPath.fill()
    }

    //// Generated Images

    public class var imageOfCanvasCloud: UIImage {
        if Cache.imageOfCanvasCloud != nil {
            return Cache.imageOfCanvasCloud!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(200, 120), false, 0)
            AngyWordsStyleKit.drawCanvasCloud()

        Cache.imageOfCanvasCloud = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvasCloud!
    }

    //// Customization Infrastructure

    @IBOutlet var canvasCloudTargets: [AnyObject]! {
        get { return Cache.canvasCloudTargets }
        set {
            Cache.canvasCloudTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(AngyWordsStyleKit.imageOfCanvasCloud)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
