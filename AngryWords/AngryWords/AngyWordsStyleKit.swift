//
//  AngyWordsStyleKit.swift
//  AngryWords
//
//  Created by RPKH on 24.10.14.
//  Copyright (c) 2014 Babbel. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class AngyWordsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var babbelOrange: UIColor = UIColor(red: 1.000, green: 0.553, blue: 0.082, alpha: 1.000)
        static var babbelOrange75: UIColor = UIColor(red: 1.000, green: 0.659, blue: 0.322, alpha: 1.000)
        static var babbelOrange50: UIColor = UIColor(red: 1.000, green: 0.776, blue: 0.549, alpha: 1.000)
        static var babbelOrange25: UIColor = UIColor(red: 1.000, green: 0.886, blue: 0.773, alpha: 1.000)
        static var babbelLightOrange: UIColor = UIColor(red: 0.980, green: 0.667, blue: 0.106, alpha: 1.000)
        static var babbelLightOrange75: UIColor = UIColor(red: 1.000, green: 0.749, blue: 0.318, alpha: 1.000)
        static var babbelLightOrange50: UIColor = UIColor(red: 1.000, green: 0.831, blue: 0.545, alpha: 1.000)
        static var babbelLightOrange25: UIColor = UIColor(red: 1.000, green: 0.918, blue: 0.773, alpha: 1.000)
        static var babbelYellow: UIColor = UIColor(red: 1.000, green: 0.784, blue: 0.204, alpha: 1.000)
        static var babbelYellow75: UIColor = UIColor(red: 1.000, green: 0.835, blue: 0.435, alpha: 1.000)
        static var babbelYellow50: UIColor = UIColor(red: 1.000, green: 0.941, blue: 0.773, alpha: 1.000)
        static var babbelYellow25: UIColor = UIColor(red: 1.000, green: 0.973, blue: 0.890, alpha: 1.000)
        static var babbelRed: UIColor = UIColor(red: 0.890, green: 0.333, blue: 0.224, alpha: 1.000)
        static var babbelRed75: UIColor = UIColor(red: 0.949, green: 0.478, blue: 0.388, alpha: 1.000)
        static var babbelRed50: UIColor = UIColor(red: 0.965, green: 0.655, blue: 0.592, alpha: 1.000)
        static var babbelRed25: UIColor = UIColor(red: 0.980, green: 0.824, blue: 0.796, alpha: 1.000)
        static var babbelGreen: UIColor = UIColor(red: 0.176, green: 0.761, blue: 0.463, alpha: 1.000)
        static var babbelGreen75: UIColor = UIColor(red: 0.424, green: 0.812, blue: 0.588, alpha: 1.000)
        static var babbelGreen50: UIColor = UIColor(red: 0.616, green: 0.875, blue: 0.725, alpha: 1.000)
        static var babbelgreen25: UIColor = UIColor(red: 0.808, green: 0.933, blue: 0.859, alpha: 1.000)
        static var babbelBlue: UIColor = UIColor(red: 0.251, green: 0.729, blue: 0.855, alpha: 1.000)
        static var babbelBlue75: UIColor = UIColor(red: 0.408, green: 0.812, blue: 0.918, alpha: 1.000)
        static var babbelBlue50: UIColor = UIColor(red: 0.604, green: 0.875, blue: 0.941, alpha: 1.000)
        static var babbelBlue25: UIColor = UIColor(red: 0.800, green: 0.937, blue: 0.973, alpha: 1.000)
        static var babbelBeige: UIColor = UIColor(red: 0.929, green: 0.922, blue: 0.882, alpha: 1.000)
        static var babbelBeige75: UIColor = UIColor(red: 0.949, green: 0.945, blue: 0.910, alpha: 1.000)
        static var babbelBeige50: UIColor = UIColor(red: 0.965, green: 0.965, blue: 0.937, alpha: 1.000)
        static var babbelBeige25: UIColor = UIColor(red: 0.984, green: 0.980, blue: 0.973, alpha: 1.000)
        static var babbelGray: UIColor = UIColor(red: 0.447, green: 0.447, blue: 0.404, alpha: 1.000)
        static var babbelGray75: UIColor = UIColor(red: 0.588, green: 0.584, blue: 0.549, alpha: 1.000)
        static var babbelGray50: UIColor = UIColor(red: 0.725, green: 0.725, blue: 0.698, alpha: 1.000)
        static var babbelGray25: UIColor = UIColor(red: 0.863, green: 0.863, blue: 0.851, alpha: 1.000)
        static var babbelFontDarkGray: UIColor = UIColor(red: 0.204, green: 0.204, blue: 0.204, alpha: 1.000)
        static var babbelFontGray: UIColor = UIColor(red: 0.447, green: 0.447, blue: 0.404, alpha: 1.000)
        static var imageOfCanvasCloud: UIImage?
        static var canvasCloudTargets: [AnyObject]?
        static var imageOfCanvasCactus: UIImage?
        static var canvasCactusTargets: [AnyObject]?
        static var imageOfCanvasEule: UIImage?
        static var canvasEuleTargets: [AnyObject]?
    }

    //// Colors

    public class var babbelOrange: UIColor { return Cache.babbelOrange }
    public class var babbelOrange75: UIColor { return Cache.babbelOrange75 }
    public class var babbelOrange50: UIColor { return Cache.babbelOrange50 }
    public class var babbelOrange25: UIColor { return Cache.babbelOrange25 }
    public class var babbelLightOrange: UIColor { return Cache.babbelLightOrange }
    public class var babbelLightOrange75: UIColor { return Cache.babbelLightOrange75 }
    public class var babbelLightOrange50: UIColor { return Cache.babbelLightOrange50 }
    public class var babbelLightOrange25: UIColor { return Cache.babbelLightOrange25 }
    public class var babbelYellow: UIColor { return Cache.babbelYellow }
    public class var babbelYellow75: UIColor { return Cache.babbelYellow75 }
    public class var babbelYellow50: UIColor { return Cache.babbelYellow50 }
    public class var babbelYellow25: UIColor { return Cache.babbelYellow25 }
    public class var babbelRed: UIColor { return Cache.babbelRed }
    public class var babbelRed75: UIColor { return Cache.babbelRed75 }
    public class var babbelRed50: UIColor { return Cache.babbelRed50 }
    public class var babbelRed25: UIColor { return Cache.babbelRed25 }
    public class var babbelGreen: UIColor { return Cache.babbelGreen }
    public class var babbelGreen75: UIColor { return Cache.babbelGreen75 }
    public class var babbelGreen50: UIColor { return Cache.babbelGreen50 }
    public class var babbelgreen25: UIColor { return Cache.babbelgreen25 }
    public class var babbelBlue: UIColor { return Cache.babbelBlue }
    public class var babbelBlue75: UIColor { return Cache.babbelBlue75 }
    public class var babbelBlue50: UIColor { return Cache.babbelBlue50 }
    public class var babbelBlue25: UIColor { return Cache.babbelBlue25 }
    public class var babbelBeige: UIColor { return Cache.babbelBeige }
    public class var babbelBeige75: UIColor { return Cache.babbelBeige75 }
    public class var babbelBeige50: UIColor { return Cache.babbelBeige50 }
    public class var babbelBeige25: UIColor { return Cache.babbelBeige25 }
    public class var babbelGray: UIColor { return Cache.babbelGray }
    public class var babbelGray75: UIColor { return Cache.babbelGray75 }
    public class var babbelGray50: UIColor { return Cache.babbelGray50 }
    public class var babbelGray25: UIColor { return Cache.babbelGray25 }
    public class var babbelFontDarkGray: UIColor { return Cache.babbelFontDarkGray }
    public class var babbelFontGray: UIColor { return Cache.babbelFontGray }

    //// Drawing Methods

    public class func drawCanvasCloud() {
        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(16, 46, 163, 74), cornerRadius: 10)
        color.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(0, 40, 57, 80))
        color.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(42, 0, 98, 99))
        color.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(121, 25, 79, 95))
        color.setFill()
        oval3Path.fill()
    }

    public class func drawCanvasCactus() {
        //// Color Declarations
        let color2 = AngyWordsStyleKit.babbelGreen.colorWithSaturation(1)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(58, 52, 85, 310))
        color2.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(58, 0, 85, 102))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(189, 102))
        bezierPath.addCurveToPoint(CGPointMake(189, 102.18), controlPoint1: CGPointMake(189, 102), controlPoint2: CGPointMake(189, 102.06))
        bezierPath.addCurveToPoint(CGPointMake(209.68, 109.47), controlPoint1: CGPointMake(196.36, 101.28), controlPoint2: CGPointMake(204.03, 103.71))
        bezierPath.addCurveToPoint(CGPointMake(209.68, 145.53), controlPoint1: CGPointMake(219.44, 119.43), controlPoint2: CGPointMake(219.44, 135.57))
        bezierPath.addCurveToPoint(CGPointMake(189, 152.82), controlPoint1: CGPointMake(204.03, 151.29), controlPoint2: CGPointMake(196.36, 153.72))
        bezierPath.addCurveToPoint(CGPointMake(189, 153), controlPoint1: CGPointMake(189, 152.94), controlPoint2: CGPointMake(189, 153))
        bezierPath.addLineToPoint(CGPointMake(119, 153))
        bezierPath.addLineToPoint(CGPointMake(119, 102))
        bezierPath.addLineToPoint(CGPointMake(189, 102))
        bezierPath.addLineToPoint(CGPointMake(189, 102))
        bezierPath.closePath()
        color2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(98, 174))
        bezier2Path.addCurveToPoint(CGPointMake(98, 225), controlPoint1: CGPointMake(98, 174), controlPoint2: CGPointMake(98, 225))
        bezier2Path.addLineToPoint(CGPointMake(28, 225))
        bezier2Path.addCurveToPoint(CGPointMake(28, 224.82), controlPoint1: CGPointMake(28, 225), controlPoint2: CGPointMake(28, 224.94))
        bezier2Path.addCurveToPoint(CGPointMake(7.32, 217.53), controlPoint1: CGPointMake(20.64, 225.72), controlPoint2: CGPointMake(12.97, 223.29))
        bezier2Path.addCurveToPoint(CGPointMake(7.32, 181.47), controlPoint1: CGPointMake(-2.44, 207.57), controlPoint2: CGPointMake(-2.44, 191.43))
        bezier2Path.addCurveToPoint(CGPointMake(28, 174.18), controlPoint1: CGPointMake(12.97, 175.71), controlPoint2: CGPointMake(20.64, 173.28))
        bezier2Path.addCurveToPoint(CGPointMake(28, 174), controlPoint1: CGPointMake(28, 174.06), controlPoint2: CGPointMake(28, 174))
        bezier2Path.addLineToPoint(CGPointMake(98, 174))
        bezier2Path.addLineToPoint(CGPointMake(98, 174))
        bezier2Path.closePath()
        color2.setFill()
        bezier2Path.fill()
    }

    public class func drawCanvasStamm(#size: CGSize) {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, size.width, (size.height + 29))


        //// Stamm Drawing
        var stammPath = UIBezierPath()
        stammPath.moveToPoint(CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.72464 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.81159 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23333 * frame.width, frame.minY + 0.79710 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.74275 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.88043 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.20000 * frame.width, frame.minY + 1.00000 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.40000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 1.00000 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.72464 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56667 * frame.width, frame.minY + 0.76812 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.63768 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63333 * frame.width, frame.minY + 0.68116 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.60833 * frame.width, frame.minY + 0.69203 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.49275 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.59167 * frame.width, frame.minY + 0.58333 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.60000 * frame.width, frame.minY + 0.49275 * frame.height))
        stammPath.addLineToPoint(CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.49275 * frame.height))
        stammPath.addCurveToPoint(CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.72464 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30000 * frame.width, frame.minY + 0.49275 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.36667 * frame.width, frame.minY + 0.65217 * frame.height))
        stammPath.closePath()
        brown.setFill()
        stammPath.fill()
    }

    public class func drawCanvasSchleuderVorne(#size: CGSize) {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, size.width, (size.height + 29))


        //// SchleuderVorne 2 Drawing
        var schleuderVorne2Path = UIBezierPath()
        schleuderVorne2Path.moveToPoint(CGPointMake(frame.minX + 0.83333 * frame.width, frame.minY + 0.00000 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.05797 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.98333 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.05797 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 0.80000 * frame.width, frame.minY + 0.40580 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.05797 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.96667 * frame.width, frame.minY + 0.26087 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.59420 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63333 * frame.width, frame.minY + 0.55072 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.59420 * frame.height))
        schleuderVorne2Path.addLineToPoint(CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.40580 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 0.53333 * frame.width, frame.minY + 0.31884 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.33333 * frame.width, frame.minY + 0.40580 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.46416 * frame.width, frame.minY + 0.41508 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.05797 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.70000 * frame.width, frame.minY + 0.08696 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.05797 * frame.height))
        schleuderVorne2Path.addCurveToPoint(CGPointMake(frame.minX + 0.83333 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.66667 * frame.width, frame.minY + 0.05797 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.68333 * frame.width, frame.minY + 0.00000 * frame.height))
        schleuderVorne2Path.closePath()
        brown.setFill()
        schleuderVorne2Path.fill()
    }

    public class func drawCanvasSchleuderHinten(#size: CGSize) {
        //// Color Declarations
        let brown = UIColor(red: 0.670, green: 0.599, blue: 0.500, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, size.width, (size.height + 29))


        //// SchleuderHinten 2 Drawing
        var schleuderHinten2Path = UIBezierPath()
        schleuderHinten2Path.moveToPoint(CGPointMake(frame.minX + 0.13334 * frame.width, frame.minY + 0.00000 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.00001 * frame.width, frame.minY + 0.04348 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00058 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00001 * frame.width, frame.minY + 0.04348 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.14369 * frame.width, frame.minY + 0.39130 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00001 * frame.width, frame.minY + 0.04348 * frame.height), controlPoint2: CGPointMake(frame.minX + -0.00382 * frame.width, frame.minY + 0.24638 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.46668 * frame.width, frame.minY + 0.55072 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.29120 * frame.width, frame.minY + 0.53623 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.46668 * frame.width, frame.minY + 0.55072 * frame.height))
        schleuderHinten2Path.addLineToPoint(CGPointMake(frame.minX + 0.46668 * frame.width, frame.minY + 0.39130 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.33334 * frame.width, frame.minY + 0.31884 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.46668 * frame.width, frame.minY + 0.39130 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.36668 * frame.width, frame.minY + 0.37681 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.23334 * frame.width, frame.minY + 0.04348 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.20001 * frame.width, frame.minY + 0.08696 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23334 * frame.width, frame.minY + 0.04348 * frame.height))
        schleuderHinten2Path.addCurveToPoint(CGPointMake(frame.minX + 0.13334 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23334 * frame.width, frame.minY + 0.04348 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.26610 * frame.width, frame.minY + 0.00000 * frame.height))
        schleuderHinten2Path.closePath()
        brown.setFill()
        schleuderHinten2Path.fill()
    }

    public class func drawCanvasSling(#size: CGSize) {

        //// Frames
        let frame = CGRectMake(0, 0, (size.width - 22), (size.height - 16))


        //// Rectangle Drawing
        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.78261 * frame.height))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 0.48750 * frame.width, frame.minY + 0.65217 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.78261 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23750 * frame.width, frame.minY + 0.65217 * frame.height))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.73750 * frame.width, frame.minY + 0.65217 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 0.48750 * frame.width, frame.minY + 0.34783 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.73750 * frame.width, frame.minY + 0.34783 * frame.height))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.21739 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23750 * frame.width, frame.minY + 0.34783 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.21739 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.78261 * frame.height))
        rectanglePath.closePath()
        UIColor.grayColor().setFill()
        rectanglePath.fill()
    }

    public class func drawCanvasEule() {

        //// Body Drawing
        var bodyPath = UIBezierPath()
        bodyPath.moveToPoint(CGPointMake(399, 442))
        bodyPath.addCurveToPoint(CGPointMake(399.09, 238.29), controlPoint1: CGPointMake(470.72, 394.94), controlPoint2: CGPointMake(451.74, 317))
        bodyPath.addCurveToPoint(CGPointMake(139.37, 238.29), controlPoint1: CGPointMake(346.43, 159.59), controlPoint2: CGPointMake(187.49, 163.59))
        bodyPath.addCurveToPoint(CGPointMake(139, 442), controlPoint1: CGPointMake(91.25, 313), controlPoint2: CGPointMake(67.28, 394.94))
        bodyPath.addCurveToPoint(CGPointMake(399, 442), controlPoint1: CGPointMake(210.72, 489.06), controlPoint2: CGPointMake(327.28, 489.06))
        bodyPath.closePath()
        AngyWordsStyleKit.babbelGreen.setFill()
        bodyPath.fill()


        //// Head Drawing
        var headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(110, 200))
        headPath.addCurveToPoint(CGPointMake(422, 200), controlPoint1: CGPointMake(145, 244), controlPoint2: CGPointMake(395, 249))
        headPath.addCurveToPoint(CGPointMake(422, 87), controlPoint1: CGPointMake(449, 151), controlPoint2: CGPointMake(422, 87))
        headPath.addCurveToPoint(CGPointMake(264, 68), controlPoint1: CGPointMake(422, 87), controlPoint2: CGPointMake(342, 68))
        headPath.addCurveToPoint(CGPointMake(110, 87), controlPoint1: CGPointMake(186, 68), controlPoint2: CGPointMake(110, 87))
        headPath.addCurveToPoint(CGPointMake(110, 200), controlPoint1: CGPointMake(110, 87), controlPoint2: CGPointMake(75, 156))
        headPath.closePath()
        AngyWordsStyleKit.babbelGreen.setFill()
        headPath.fill()


        //// EarLeft Drawing
        var earLeftPath = UIBezierPath()
        earLeftPath.moveToPoint(CGPointMake(132, 7))
        earLeftPath.addCurveToPoint(CGPointMake(196.08, 87.25), controlPoint1: CGPointMake(153.54, 7), controlPoint2: CGPointMake(196.08, 87.25))
        earLeftPath.addLineToPoint(CGPointMake(109.92, 87.25))
        earLeftPath.addCurveToPoint(CGPointMake(132, 7), controlPoint1: CGPointMake(109.92, 87.25), controlPoint2: CGPointMake(110.46, 7))
        earLeftPath.closePath()
        AngyWordsStyleKit.babbelGreen.setFill()
        earLeftPath.fill()


        //// Beak Drawing
        var beakPath = UIBezierPath()
        beakPath.moveToPoint(CGPointMake(267.69, 218))
        beakPath.addCurveToPoint(CGPointMake(225.07, 156.52), controlPoint1: CGPointMake(246.14, 217.92), controlPoint2: CGPointMake(225.07, 156.52))
        beakPath.addLineToPoint(CGPointMake(311.24, 156.84))
        beakPath.addCurveToPoint(CGPointMake(267.69, 218), controlPoint1: CGPointMake(311.24, 156.84), controlPoint2: CGPointMake(289.23, 218.08))
        beakPath.closePath()
        AngyWordsStyleKit.babbelOrange.setFill()
        beakPath.fill()


        //// EyesBack Drawing
        var eyesBackPath = UIBezierPath()
        eyesBackPath.moveToPoint(CGPointMake(400.62, 102.38))
        eyesBackPath.addCurveToPoint(CGPointMake(400.62, 176.62), controlPoint1: CGPointMake(421.13, 122.88), controlPoint2: CGPointMake(421.13, 156.12))
        eyesBackPath.addCurveToPoint(CGPointMake(326, 177), controlPoint1: CGPointMake(380.12, 197.13), controlPoint2: CGPointMake(343, 197))
        eyesBackPath.addCurveToPoint(CGPointMake(270, 160), controlPoint1: CGPointMake(321.75, 172), controlPoint2: CGPointMake(294, 160))
        eyesBackPath.addCurveToPoint(CGPointMake(209.77, 175.77), controlPoint1: CGPointMake(246, 160), controlPoint2: CGPointMake(213.71, 171.71))
        eyesBackPath.addCurveToPoint(CGPointMake(136.23, 175.77), controlPoint1: CGPointMake(194, 192), controlPoint2: CGPointMake(156.54, 196.08))
        eyesBackPath.addCurveToPoint(CGPointMake(136.23, 102.23), controlPoint1: CGPointMake(115.92, 155.46), controlPoint2: CGPointMake(115.92, 122.54))
        eyesBackPath.addCurveToPoint(CGPointMake(209.77, 102.23), controlPoint1: CGPointMake(156.54, 81.92), controlPoint2: CGPointMake(186, 87))
        eyesBackPath.addCurveToPoint(CGPointMake(270, 115), controlPoint1: CGPointMake(215.71, 106.04), controlPoint2: CGPointMake(248, 114))
        eyesBackPath.addCurveToPoint(CGPointMake(326.38, 102.38), controlPoint1: CGPointMake(292, 116), controlPoint2: CGPointMake(321.22, 105.72))
        eyesBackPath.addCurveToPoint(CGPointMake(400.62, 102.38), controlPoint1: CGPointMake(347, 89), controlPoint2: CGPointMake(380.12, 81.87))
        eyesBackPath.closePath()
        AngyWordsStyleKit.babbelgreen25.setFill()
        eyesBackPath.fill()


        //// PupilRight Drawing
        var pupilRightPath = UIBezierPath(ovalInRect: CGRectMake(335, 108, 67, 67))
        AngyWordsStyleKit.babbelFontDarkGray.setFill()
        pupilRightPath.fill()


        //// PupilLeft Drawing
        var pupilLeftPath = UIBezierPath(ovalInRect: CGRectMake(143, 108, 64, 64))
        AngyWordsStyleKit.babbelFontDarkGray.setFill()
        pupilLeftPath.fill()


        //// EarRight Drawing
        var earRightPath = UIBezierPath()
        earRightPath.moveToPoint(CGPointMake(399, 7))
        earRightPath.addCurveToPoint(CGPointMake(334.92, 87.25), controlPoint1: CGPointMake(377.46, 7), controlPoint2: CGPointMake(334.92, 87.25))
        earRightPath.addLineToPoint(CGPointMake(421.08, 87.25))
        earRightPath.addCurveToPoint(CGPointMake(399, 7), controlPoint1: CGPointMake(421.08, 87.25), controlPoint2: CGPointMake(420.54, 7))
        earRightPath.closePath()
        AngyWordsStyleKit.babbelGreen.setFill()
        earRightPath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(153, 125, 10, 16))
        UIColor.whiteColor().setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(346, 127, 10, 16))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Body 2 Drawing
        var body2Path = UIBezierPath()
        body2Path.moveToPoint(CGPointMake(362.97, 419.5))
        body2Path.addCurveToPoint(CGPointMake(363.04, 272.33), controlPoint1: CGPointMake(414.95, 385.5), controlPoint2: CGPointMake(401.2, 329.19))
        body2Path.addCurveToPoint(CGPointMake(174.82, 272.33), controlPoint1: CGPointMake(324.88, 215.46), controlPoint2: CGPointMake(209.69, 218.35))
        body2Path.addCurveToPoint(CGPointMake(174.55, 419.5), controlPoint1: CGPointMake(139.95, 326.3), controlPoint2: CGPointMake(122.58, 385.5))
        body2Path.addCurveToPoint(CGPointMake(362.97, 419.5), controlPoint1: CGPointMake(226.53, 453.5), controlPoint2: CGPointMake(311, 453.5))
        body2Path.closePath()
        AngyWordsStyleKit.babbelGreen75.setFill()
        body2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(187, 453, 15, 32))
        UIColor.grayColor().setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(199, 456, 16, 32))
        UIColor.grayColor().setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(212, 456, 13, 32))
        UIColor.grayColor().setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        var oval6Path = UIBezierPath(ovalInRect: CGRectMake(320, 456, 15, 32))
        UIColor.grayColor().setFill()
        oval6Path.fill()


        //// Oval 7 Drawing
        var oval7Path = UIBezierPath(ovalInRect: CGRectMake(307, 459, 16, 32))
        UIColor.grayColor().setFill()
        oval7Path.fill()


        //// Oval 8 Drawing
        var oval8Path = UIBezierPath(ovalInRect: CGRectMake(297, 459, 13, 32))
        UIColor.grayColor().setFill()
        oval8Path.fill()
    }

    //// Generated Images

    public class var imageOfCanvasCloud: UIImage {
        if Cache.imageOfCanvasCloud != nil {
            return Cache.imageOfCanvasCloud!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(200, 120), false, 0)
            AngyWordsStyleKit.drawCanvasCloud()

        Cache.imageOfCanvasCloud = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvasCloud!
    }

    public class var imageOfCanvasCactus: UIImage {
        if Cache.imageOfCanvasCactus != nil {
            return Cache.imageOfCanvasCactus!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(217, 362), false, 0)
            AngyWordsStyleKit.drawCanvasCactus()

        Cache.imageOfCanvasCactus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvasCactus!
    }

    public class func imageOfCanvasStamm(#size: CGSize) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 69), false, 0)
            AngyWordsStyleKit.drawCanvasStamm(size: size)

        var imageOfCanvasStamm = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCanvasStamm
    }

    public class func imageOfCanvasSchleuderVorne(#size: CGSize) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 69), false, 0)
            AngyWordsStyleKit.drawCanvasSchleuderVorne(size: size)

        var imageOfCanvasSchleuderVorne = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCanvasSchleuderVorne
    }

    public class func imageOfCanvasSchleuderHinten(#size: CGSize) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 69), false, 0)
            AngyWordsStyleKit.drawCanvasSchleuderHinten(size: size)

        var imageOfCanvasSchleuderHinten = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCanvasSchleuderHinten
    }

    public class func imageOfCanvasSling(#size: CGSize) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(8, 24), false, 0)
            AngyWordsStyleKit.drawCanvasSling(size: size)

        var imageOfCanvasSling = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCanvasSling
    }

    public class var imageOfCanvasEule: UIImage {
        if Cache.imageOfCanvasEule != nil {
            return Cache.imageOfCanvasEule!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(500, 500), false, 0)
            AngyWordsStyleKit.drawCanvasEule()

        Cache.imageOfCanvasEule = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvasEule!
    }

    //// Customization Infrastructure

    @IBOutlet var canvasCloudTargets: [AnyObject]! {
        get { return Cache.canvasCloudTargets }
        set {
            Cache.canvasCloudTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(AngyWordsStyleKit.imageOfCanvasCloud)
            }
        }
    }

    @IBOutlet var canvasCactusTargets: [AnyObject]! {
        get { return Cache.canvasCactusTargets }
        set {
            Cache.canvasCactusTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(AngyWordsStyleKit.imageOfCanvasCactus)
            }
        }
    }

    @IBOutlet var canvasEuleTargets: [AnyObject]! {
        get { return Cache.canvasEuleTargets }
        set {
            Cache.canvasEuleTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(AngyWordsStyleKit.imageOfCanvasEule)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
